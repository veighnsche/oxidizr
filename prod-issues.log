    Checking switchyard v0.1.0 (/home/vince/Projects/oxidizr-arch/cargo/switchyard)
error: redundant else block
   --> cargo/switchyard/src/api/apply/lock.rs:115:14
    |
115 |               } else {
    |  ______________^
116 | |                 StageLogger::new(tctx).apply_attempt().merge(json!({
117 | |                     "lock_backend": "none",
118 | |                     "no_lock_manager": true,
119 | |                     "lock_attempts": 0u64,
120 | |                 })).emit_warn();
121 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
    = note: `-D clippy::redundant-else` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(clippy::redundant_else)]`
help: remove the `else` block and move the contents out
    |
115 ~             }
116 +             StageLogger::new(tctx).apply_attempt().merge(json!({
117 +                 "lock_backend": "none",
118 +                 "no_lock_manager": true,
119 +                 "lock_attempts": 0u64,
120 +             })).emit_warn();
    |

error: `allow` attribute without specifying a reason
  --> cargo/switchyard/src/api/errors.rs:72:1
   |
72 | #[allow(non_camel_case_types)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: try adding a reason at the end with `, reason = ".."`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason
note: the lint level is defined here
  --> cargo/switchyard/src/lib.rs:81:9
   |
81 |         clippy::allow_attributes_without_reason,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: `allow` attribute without specifying a reason
  --> cargo/switchyard/src/api/errors.rs:72:1
   |
72 | #[allow(non_camel_case_types)]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: try adding a reason at the end with `, reason = ".."`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason
   = note: `-D clippy::allow-attributes-without-reason` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(clippy::allow_attributes_without_reason)]`

error: redundant else block
  --> cargo/switchyard/src/fs/restore/engine.rs:52:14
   |
52 |               } else {
   |  ______________^
53 | |                 return Ok(());
54 | |             }
   | |_____________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else
help: remove the `else` block and move the contents out
   |
52 ~             }
53 +             return Ok(());
   |

error: binding's name is too similar to existing binding
   --> cargo/switchyard/src/logging/audit.rs:210:21
    |
210 |                 let ppid = unsafe { libc::getppid() as u32 };
    |                     ^^^^
    |
note: existing binding defined here
   --> cargo/switchyard/src/logging/audit.rs:209:21
    |
209 |                 let pid = std::process::id() as u32;
    |                     ^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names
    = note: `-D clippy::similar-names` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(clippy::similar_names)]`

error: binding's name is too similar to existing binding
   --> cargo/switchyard/src/logging/audit.rs:216:21
    |
216 |                 let egid = unsafe { libc::getegid() } as u32;
    |                     ^^^^
    |
note: existing binding defined here
   --> cargo/switchyard/src/logging/audit.rs:215:21
    |
215 |                 let euid = unsafe { libc::geteuid() } as u32;
    |                     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

error: usage of an `unsafe` block
   --> cargo/switchyard/src/logging/audit.rs:210:28
    |
210 |                 let ppid = unsafe { libc::getppid() as u32 };
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: the lint level is defined here
   --> cargo/switchyard/src/lib.rs:1:11
    |
1   | #![forbid(unsafe_code)]
    |           ^^^^^^^^^^^

error: usage of an `unsafe` block
   --> cargo/switchyard/src/logging/audit.rs:215:28
    |
215 |                 let euid = unsafe { libc::geteuid() } as u32;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: usage of an `unsafe` block
   --> cargo/switchyard/src/logging/audit.rs:216:28
    |
216 |                 let egid = unsafe { libc::getegid() } as u32;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^

error: unnecessary qualification
   --> cargo/switchyard/src/fs/backup/snapshot.rs:181:9
    |
181 |         std::fs::write(&tgt, b"hello").unwrap();
    |         ^^^^^^^^^^^^^^
    |
    = note: `-D unused-qualifications` implied by `-D warnings`
    = help: to override `-D warnings` add `#[allow(unused_qualifications)]`
help: remove the unnecessary path segments
    |
181 -         std::fs::write(&tgt, b"hello").unwrap();
181 +         fs::write(&tgt, b"hello").unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/backup/snapshot.rs:193:9
    |
193 |         std::fs::create_dir_all(&target).unwrap();
    |         ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
193 -         std::fs::create_dir_all(&target).unwrap();
193 +         fs::create_dir_all(&target).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/backup/snapshot.rs:195:9
    |
195 |         std::fs::create_dir_all(link.parent().unwrap()).unwrap();
    |         ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
195 -         std::fs::create_dir_all(link.parent().unwrap()).unwrap();
195 +         fs::create_dir_all(link.parent().unwrap()).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/backup/snapshot.rs:196:17
    |
196 |         let _ = std::os::unix::fs::symlink("../../bin", &link); // relative symlink
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
196 -         let _ = std::os::unix::fs::symlink("../../bin", &link); // relative symlink
196 +         let _ = unix::fs::symlink("../../bin", &link); // relative symlink
    |

error: empty line after doc comment
 --> cargo/switchyard/src/types/report.rs:5:1
  |
5 | / /// Centralized under `crate::types` for cross-layer reuse.
6 | |
  | |_^
...
9 |   pub struct PreflightReport {
  |   -------------------------- the comment documents this struct
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments
  = note: `-D clippy::empty-line-after-doc-comments` implied by `-D warnings`
  = help: to override `-D warnings` add `#[allow(clippy::empty_line_after_doc_comments)]`
  = help: if the empty line is unintentional, remove it

error: empty line after doc comment
  --> cargo/switchyard/src/types/report.rs:21:1
   |
21 | / /// Centralized under `crate::types` for cross-layer reuse.
22 | |
   | |_^
...
25 |   pub struct ApplyReport {
   |   ---------------------- the comment documents this struct
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments
   = help: if the empty line is unintentional, remove it

error: empty line after doc comment
  --> cargo/switchyard/src/types/report.rs:41:1
   |
41 | / /// Centralized under `crate::types` for cross-layer reuse.
42 | |
   | |_^
...
45 |   pub struct PruneResult {
   |   ---------------------- the comment documents this struct
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_doc_comments
   = help: if the empty line is unintentional, remove it

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:154:9
    |
154 |         std::fs::write(&src, b"hello").unwrap();
    |         ^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
154 -         std::fs::write(&src, b"hello").unwrap();
154 +         fs::write(&src, b"hello").unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:165:18
    |
165 |         let md = std::fs::symlink_metadata(&tgt).unwrap();
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
165 -         let md = std::fs::symlink_metadata(&tgt).unwrap();
165 +         let md = fs::symlink_metadata(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:167:20
    |
167 |         let link = std::fs::read_link(&tgt).unwrap();
    |                    ^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
167 -         let link = std::fs::read_link(&tgt).unwrap();
167 +         let link = fs::read_link(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:179:9
    |
179 |         std::fs::write(&src, b"new").unwrap();
    |         ^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
179 -         std::fs::write(&src, b"new").unwrap();
179 +         fs::write(&src, b"new").unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:181:25
    |
181 |             let mut f = std::fs::File::create(&tgt).unwrap();
    |                         ^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
181 -             let mut f = std::fs::File::create(&tgt).unwrap();
181 +             let mut f = fs::File::create(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:192:18
    |
192 |         let md = std::fs::symlink_metadata(&tgt).unwrap();
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
192 -         let md = std::fs::symlink_metadata(&tgt).unwrap();
192 +         let md = fs::symlink_metadata(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:200:19
    |
200 |         let md2 = std::fs::symlink_metadata(&tgt).unwrap();
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
200 -         let md2 = std::fs::symlink_metadata(&tgt).unwrap();
200 +         let md2 = fs::symlink_metadata(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/fs/swap.rs:205:23
    |
205 |         let content = std::fs::read_to_string(&tgt).unwrap();
    |                       ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
205 -         let content = std::fs::read_to_string(&tgt).unwrap();
205 +         let content = fs::read_to_string(&tgt).unwrap();
    |

error: unnecessary qualification
   --> cargo/switchyard/src/policy/rescue.rs:110:9
    |
110 |         std::env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "1");
    |         ^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
110 -         std::env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "1");
110 +         env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "1");
    |

error: unnecessary qualification
   --> cargo/switchyard/src/policy/rescue.rs:112:9
    |
112 |         std::env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
    |         ^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
112 -         std::env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
112 +         env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
    |

error: unnecessary qualification
   --> cargo/switchyard/src/policy/rescue.rs:119:9
    |
119 |         std::env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "0");
    |         ^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
119 -         std::env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "0");
119 +         env::set_var("SWITCHYARD_FORCE_RESCUE_OK", "0");
    |

error: unnecessary qualification
   --> cargo/switchyard/src/policy/rescue.rs:121:9
    |
121 |         std::env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
    |         ^^^^^^^^^^^^^^^^^^^^
    |
help: remove the unnecessary path segments
    |
121 -         std::env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
121 +         env::remove_var("SWITCHYARD_FORCE_RESCUE_OK");
    |

error: trivial cast: `&E` as `&dyn logging::facts::FactsEmitter`
  --> cargo/switchyard/src/api/apply/mod.rs:52:9
   |
52 |         &api.facts as &dyn FactsEmitter,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable
note: the lint level is defined here
  --> cargo/switchyard/src/lib.rs:62:9
   |
62 |         trivial_casts,
   |         ^^^^^^^^^^^^^

error: trivial cast: `&E` as `&dyn logging::facts::FactsEmitter`
  --> cargo/switchyard/src/api/plan.rs:52:9
   |
52 |         &api.facts as &dyn FactsEmitter,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial cast: `&E` as `&dyn logging::facts::FactsEmitter`
  --> cargo/switchyard/src/api/preflight/mod.rs:33:9
   |
33 |         &api.facts as &dyn FactsEmitter,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial cast: `&E` as `&dyn logging::facts::FactsEmitter`
  --> cargo/switchyard/src/api/apply/mod.rs:52:9
   |
52 |         &api.facts as &dyn FactsEmitter,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable
   = note: `-D trivial-casts` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(trivial_casts)]`

error: trivial cast: `&E` as `&dyn logging::facts::FactsEmitter`
   --> cargo/switchyard/src/api/mod.rs:135:13
    |
135 |             &self.facts as &dyn FactsEmitter,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial numeric cast: `u128` as `u128`
  --> cargo/switchyard/src/fs/backup/prune.rs:81:57
   |
81 |     let age_cutoff_ms: Option<u128> = age_limit.map(|d| d.as_millis() as u128);
   |                                                         ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable
note: the lint level is defined here
  --> cargo/switchyard/src/lib.rs:63:9
   |
63 |         trivial_numeric_casts,
   |         ^^^^^^^^^^^^^^^^^^^^^

error: trivial numeric cast: `u32` as `u32`
   --> cargo/switchyard/src/logging/audit.rs:209:27
    |
209 |                 let pid = std::process::id() as u32;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial numeric cast: `u32` as `u32`
   --> cargo/switchyard/src/logging/audit.rs:215:28
    |
215 |                 let euid = unsafe { libc::geteuid() } as u32;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial numeric cast: `u32` as `u32`
   --> cargo/switchyard/src/logging/audit.rs:216:28
    |
216 |                 let egid = unsafe { libc::getegid() } as u32;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: cast can be replaced by coercion; this might require a temporary variable

error: trivial numeric cast: `u128` as `u128`
  --> cargo/switchyard/src/fs/backup/prune.rs:81:57
   |
81 |     let age_cutoff_ms: Option<u128> = age_limit.map(|d| d.as_millis() as u128);
   |                                                         ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: cast can be replaced by coercion; this might require a temporary variable
   = note: `-D trivial-numeric-casts` implied by `-D warnings`
   = help: to override `-D warnings` add `#[allow(trivial_numeric_casts)]`

error[E0283]: type annotations needed
   --> cargo/switchyard/src/logging/facts.rs:58:19
    |
58  |                 m.entry("subsystem".into())
    |                   ^^^^^ ------------------ type must be known at this point
    |                   |
    |                   cannot infer type of the type parameter `S` declared on the method `entry`
    |
    = note: cannot satisfy `_: std::convert::Into<std::string::String>`
note: required by a bound in `serde_json::Map::<std::string::String, serde_json::Value>::entry`
   --> /home/vince/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_json-1.0.143/src/map.rs:276:12
    |
274 |     pub fn entry<S>(&mut self, key: S) -> Entry
    |            ----- required by a bound in this associated function
275 |     where
276 |         S: Into<String>,
    |            ^^^^^^^^^^^^ required by this bound in `Map::<String, Value>::entry`
help: consider specifying the generic argument
    |
58  |                 m.entry::<S>("subsystem".into())
    |                        +++++
help: consider removing this method call, as the receiver has type `&'static str` and `&'static str: std::convert::Into<std::string::String>` trivially holds
    |
58  -                 m.entry("subsystem".into())
58  +                 m.entry("subsystem")
    |

For more information about this error, try `rustc --explain E0283`.
error: could not compile `switchyard` (lib) due to 20 previous errors
warning: build failed, waiting for other jobs to finish...
error: could not compile `switchyard` (lib test) due to 36 previous errors
