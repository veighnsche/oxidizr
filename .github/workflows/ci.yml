name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Guardrails (authoritative modules)
        run: |
          set -euo pipefail
          echo "Checking no direct which::which usage outside src/system/worker/fs_ops.rs"
          if grep -R --line-number --fixed-strings "which::which" src | grep -v "^src/system/worker/fs_ops.rs:"; then
            echo "ERROR: which::which used outside src/system/worker/fs_ops.rs" >&2
            exit 1
          fi

          echo "Checking single logging sink setup (tracing_subscriber::fmt only in src/logging/init.rs)"
          if grep -R --line-number --fixed-strings "tracing_subscriber::fmt" src | grep -v "^src/logging/init.rs:"; then
            echo "ERROR: tracing_subscriber::fmt used outside src/logging/init.rs" >&2
            exit 1
          fi

          echo "Checking single symlink implementation (std::os::unix::fs::symlink only in src/symlink/ops.rs)"
          if grep -R --line-number --fixed-strings "std::os::unix::fs::symlink" src | grep -v "^src/symlink/ops.rs:"; then
            echo "ERROR: std::os::unix::fs::symlink used outside src/symlink/ops.rs" >&2
            exit 1
          fi

          # Also check the common alias used in code: unix_fs::symlink
          if grep -R --line-number --fixed-strings "unix_fs::symlink" src | grep -v "^src/symlink/ops.rs:"; then
            echo "ERROR: unix_fs::symlink used outside src/symlink/ops.rs" >&2
            exit 1
          fi

          echo "Guardrails passed"

      - name: Guardrails (switchyard crate)
        run: |
          set -euo pipefail
          cd cargo/switchyard

          echo "Checking no #[path] under src/api/"
          if grep -R --line-number "#[path]" src/api; then
            echo "ERROR: #[path] found under cargo/switchyard/src/api" >&2
            exit 1
          fi

          echo "Checking no deprecated adapters::lock_file shim"
          if grep -R --line-number "adapters::lock_file::" src tests; then
            echo "ERROR: adapters::lock_file:: usage found" >&2
            exit 1
          fi

          echo "Checking no legacy audit::emit_* calls outside src/logging/"
          if grep -R --line-number "audit::emit_" src | grep -v "^src/logging/"; then
            echo "ERROR: legacy audit::emit_* used outside src/logging/" >&2
            exit 1
          fi

          echo "Checking no direct FactsEmitter::emit outside src/logging/"
          if grep -R --line-number "FactsEmitter::emit" src | grep -v "^src/logging/"; then
            echo "ERROR: direct FactsEmitter::emit used outside src/logging/" >&2
            exit 1
          fi

          echo "Checking no public re-exports of low-level fs atoms"
          if grep -R --line-number -E "^[[:space:]]*pub[[:space:]]+use[[:space:]]+atomic::" src/fs/mod.rs; then
            echo "ERROR: public fs atoms re-exported at src/fs/mod.rs" >&2
            exit 1
          fi

          echo "Checking top-level rescue alias not used by consumers"
          if grep -R --line-number -E "\\buse[[:space:]]+switchyard::rescue\\b" src tests; then
            echo "ERROR: 'use switchyard::rescue' found; import from switchyard::policy::rescue instead" >&2
            exit 1
          fi

          echo "Switchyard guardrails passed"

      - name: Hermetic tests guard (no absolute system paths under switchyard tests)
        run: |
          set -euo pipefail
          if grep -R --line-number -E '"/(bin|sbin|usr|etc|var|proc|sys|dev|run|tmp)(/|"|$)' cargo/switchyard/tests; then
            echo "ERROR: Absolute system path literal found in cargo/switchyard/tests" >&2
            exit 1
          fi

      - name: Zero-SKIP gate (no #[ignore] tests)
        run: |
          set -euo pipefail
          if grep -R --line-number -E '^[[:space:]]*#\[ignore\]' cargo/switchyard/tests; then
            echo "ERROR: #[ignore] present in tests; Zero-SKIP gate requires no skipped tests." >&2
            exit 1
          fi

      - name: Changelog updated for switchyard crate changes
        run: |
          set -euo pipefail
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            changed=$(git diff --name-only HEAD^)
            if echo "$changed" | grep -E '^(cargo/switchyard/src/|cargo/switchyard/Cargo.toml|cargo/switchyard/SPEC/|cargo/switchyard/DOCS/)'; then
              if ! echo "$changed" | grep -q '^cargo/switchyard/CHANGELOG.md$'; then
                echo "ERROR: Detected changes to switchyard crate without updating cargo/switchyard/CHANGELOG.md" >&2
                echo "Changed files:" >&2
                echo "$changed" >&2
                exit 1
              fi
            fi
          fi

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run unit tests
        run: cargo test

  provenance-publish:
    name: Publish Provenance (gh-pages, commit-pinned)
    runs-on: ubuntu-latest
    needs: switchyard-provenance
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Download provenance ci artifact
        uses: actions/download-artifact@v4
        with:
          name: provenance-ci-${{ github.sha }}
          path: _pub/ci
      - name: Download provenance index artifact
        uses: actions/download-artifact@v4
        with:
          name: provenance-index-${{ github.sha }}
          path: _pub/index
      - name: Stage commit-pinned payload
        run: |
          set -euo pipefail
          mkdir -p _site
          DEST=_site/provenance/${GITHUB_SHA}
          mkdir -p "$DEST"
          # Copy artifacts preserving structure (portable without rsync --mkpath)
          mkdir -p "$DEST/.provenance"
          cp -a _pub/ci/. "$DEST/"
          cp -a _pub/index/. "$DEST/.provenance/"
          # Ensure front page exists and is referenced by manifest
          test -f ci/front_page.pml
          # Emit an index.html placeholder (host service will render Proofdown)
          echo "<html><body>Commit-pinned artifacts published under provenance/${GITHUB_SHA}/</body></html>" > "$DEST/index.html"
      - name: Publish to gh-pages under provenance/${{ github.sha }}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _site
          keep_files: true
          destination_dir: .
          publish_branch: provenance

  test-ci-runner:
    name: Test CI Runner
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run CI test runner (switchyard crate)
        run: |
          set -e
          python3 test_ci_runner.py -p switchyard-fs --nocapture

  switchyard-provenance:
    name: Provenance Artifacts (Switchyard)
    runs-on: ubuntu-latest
    needs: test-unit
    env:
      CARGO_TERM_COLOR: always
    steps:
      - uses: actions/checkout@v4
      - name: Set up Rust (stable)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Install Python dependencies (PyNaCl for Ed25519)
        run: |
          python -m pip install --upgrade pip
          pip install pynacl
      - name: Generate Provenance artifacts (tests + coverage + manifest)
        env:
          PROVENANCE_ED25519_PRIVATE_KEY_B64: ${{ secrets.PROVENANCE_ED25519_PRIVATE_KEY_B64 }}
        run: |
          set -euo pipefail
          python3 cargo/switchyard/scripts/provenance_ci.py
      - name: Verify manifest digests
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq coreutils
          MAN=.provenance/manifest.json
          test -f "$MAN"
          count_total=$(jq '.artifacts | length' "$MAN")
          count_ok=0
          for i in $(seq 0 $((count_total-1))); do
            path=$(jq -r ".artifacts[$i].path" "$MAN")
            want=$(jq -r ".artifacts[$i].sha256" "$MAN")
            got=$(sha256sum "$path" | awk '{print $1}')
            if [ "$want" != "$got" ]; then
              echo "Digest mismatch for $path: want=$want got=$got" >&2
              exit 1
            fi
            count_ok=$((count_ok+1))
          done
          echo "Verified $count_ok/$count_total artifact digests"
      - name: Verify manifest signature (if pubkey provided)
        env:
          PROVENANCE_ED25519_PUBLIC_KEY_B64: ${{ secrets.PROVENANCE_ED25519_PUBLIC_KEY_B64 }}
        run: |
          set -euo pipefail
          if [ -n "${PROVENANCE_ED25519_PUBLIC_KEY_B64:-}" ]; then
            if [ ! -f .provenance/manifest.json.sig ]; then
              echo "Public key provided but .provenance/manifest.json.sig is missing" >&2
              exit 1
            fi
            python - <<'PY'
import base64, os, sys
from pathlib import Path
try:
    from nacl.signing import VerifyKey
except Exception as e:
    print("PyNaCl not available for signature verification", file=sys.stderr)
    sys.exit(1)
man = Path('.provenance/manifest.json').read_text(encoding='utf-8')
data = man.encode('utf-8')
sig_b64 = Path('.provenance/manifest.json.sig').read_text(encoding='utf-8').strip()
sig = base64.b64decode(sig_b64)
pk_b64 = os.environ.get('PROVENANCE_ED25519_PUBLIC_KEY_B64', '')
vk = VerifyKey(base64.b64decode(pk_b64))
try:
    vk.verify(data, sig)
    print('Signature OK')
except Exception as e:
    print('Signature verification failed:', e, file=sys.stderr)
    sys.exit(1)
PY
          else
            echo "No public key provided or no signature file; skipping signature verification"
          fi
      - name: Upload Provenance artifacts (ci/)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: provenance-ci-${{ github.sha }}
          path: |
            ci/
          if-no-files-found: error
      - name: Upload Provenance manifest (.provenance/)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: provenance-index-${{ github.sha }}
          path: |
            .provenance/manifest.json*
          if-no-files-found: error

  bdd:
    name: BDD Gating (Switchyard)
    runs-on: ubuntu-latest
    needs: test-ci-runner
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run BDD suite (fail-only output on failure)
        run: |
          set -e
          python3 scripts/bdd_filter_results.py --fail-only
      - name: Upload BDD lastrun log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bdd-lastrun
          path: target/bdd-lastrun.log
          if-no-files-found: ignore

  golden-fixtures:
    name: Golden Fixtures Diff
    runs-on: ubuntu-latest
    needs: test-ci-runner
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run golden diff (all scenarios)
        id: run_golden
        run: |
          set -e
          python3 test_ci_runner.py --golden all --nocapture
      - name: Upload golden diffs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: golden-diff
          path: golden-diff
          if-no-files-found: ignore

  traceability:
    name: SPEC Traceability Report (non-blocking)
    runs-on: ubuntu-latest
    needs: golden-fixtures
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      - name: Generate traceability report
        run: |
          set -e
          python3 cargo/switchyard/SPEC/tools/traceability.py || true
      - name: Upload traceability report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: spec-traceability
          path: |
            cargo/switchyard/SPEC/traceability.json
            cargo/switchyard/SPEC/traceability/*.json
          if-no-files-found: ignore

  e2e-oxidizr-deb:
    name: E2E oxidizr-deb (Ubuntu)
    runs-on: ubuntu-latest
    needs: bdd
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build oxidizr-deb
        run: |
          set -euxo pipefail
          cargo build -p oxidizr-deb --release
      - name: Install tools for fetching uutils
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq xz-utils
      - name: Prepare hermetic root and uutils artifact
        id: prep
        run: |
          set -euxo pipefail
          ROOT=$(mktemp -d)
          echo "root=$ROOT" >> $GITHUB_OUTPUT
          mkdir -p "$ROOT/usr/bin" "$ROOT/var/lock" "$ROOT/opt/uutils"
          # Fetch latest uutils-coreutils release for x86_64-unknown-linux-gnu
          URL=$(curl -sSL https://api.github.com/repos/uutils/coreutils/releases/latest | jq -r '.assets[] | select(.name|test("x86_64-unknown-linux-gnu.tar.xz$")) | .browser_download_url' | head -n1)
          if [ -z "$URL" ]; then echo "Failed to locate uutils release URL" >&2; exit 1; fi
          TMPDIR=$(mktemp -d)
          curl -L "$URL" -o "$TMPDIR/uutils.tar.xz"
          tar -C "$TMPDIR" -xJf "$TMPDIR/uutils.tar.xz"
          UU=$(find "$TMPDIR" -type f -name uutils -perm -u+x | head -n1)
          if [ -z "$UU" ]; then echo "uutils binary not found in archive" >&2; exit 1; fi
          install -Dm0755 "$UU" "$ROOT/opt/uutils/uutils"
      - name: Switch coreutils into hermetic root
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" --commit use coreutils --offline --use-local "$ROOT/opt/uutils/uutils"
          test -L "$ROOT/usr/bin/ls"
      - name: Verify ls is from uutils
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          set +e
          "$ROOT/usr/bin/ls" --version > /tmp/ls_version.txt 2>&1
          set -e
          cat /tmp/ls_version.txt
          grep -i "uutils" /tmp/ls_version.txt
      - name: Status JSON smoke check
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" status --json | tee /tmp/status.json
          test "$(jq -r .coreutils /tmp/status.json)" = "active"
      - name: Doctor JSON smoke check
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" doctor --json | tee /tmp/doctor.json
          # basic checks
          test "$(jq -r .paths_ok /tmp/doctor.json)" = "true"
          # locks should not be present in this hermetic root
          test "$(jq -r .locks_present /tmp/doctor.json)" = "false"
      - name: Upload E2E logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-oxidizr-deb-logs
          path: |
            /tmp/ls_version.txt
            /tmp/status.json
            /tmp/doctor.json
          if-no-files-found: warn

  oxidizr-deb-bdd:
    name: BDD (oxidizr-deb CLI)
    runs-on: ubuntu-latest
    needs: e2e-oxidizr-deb
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-deb BDD tests (safe fakeroot + dry-run)
        run: |
          set -euo pipefail
          cargo check -p oxidizr-deb
          cargo test -p oxidizr-deb --features bdd -q

  oxidizr-deb-full-smoke:
    name: Full Smoke (oxidizr-deb, disposable Ubuntu container)
    runs-on: ubuntu-latest
    needs: oxidizr-deb-bdd
    steps:
      - uses: actions/checkout@v3
      - name: Run full destructive smoke in Ubuntu container
        run: |
          set -euo pipefail
          bash scripts/ubuntu_full_smoke.sh

  oxidizr-arch-smoke:
    name: Smoke (oxidizr-arch in Arch container)
    runs-on: ubuntu-latest
    needs: bdd
    steps:
      - uses: actions/checkout@v3
      - name: Build Arch runner image
        run: |
          set -euxo pipefail
          docker build -t oxidizr-arch-ci -f test-orch/docker/Dockerfile .
      - name: Compile oxidizr-arch inside Arch container
        run: |
          set -euxo pipefail
          docker run --rm -v "$PWD:/workspace" -w /workspace --entrypoint bash oxidizr-arch-ci -lc '
            set -euxo pipefail
            cargo build -p oxidizr-arch --release
          '
      - name: Run minimal smoke (status/doctor under hermetic root)
        run: |
          set -euxo pipefail
          docker run --rm -v "$PWD:/workspace" -w /workspace --entrypoint bash oxidizr-arch-ci -lc '
            set -euxo pipefail
            ROOT=$(mktemp -d)
            mkdir -p "$ROOT/usr/bin" "$ROOT/var/lock"
            ./target/release/oxidizr-arch --root "$ROOT" status --json | tee /tmp/arch_status.json
            ./target/release/oxidizr-arch --root "$ROOT" doctor --json | tee /tmp/arch_doctor.json
          '
      - name: Upload oxidizr-arch smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arch-smoke-logs
          path: |
            /tmp/arch_status.json
            /tmp/arch_doctor.json
          if-no-files-found: ignore

  oxidizr-arch-bdd:
    name: BDD (oxidizr-arch CLI)
    runs-on: ubuntu-latest
    needs: oxidizr-arch-smoke
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-arch BDD tests
        run: |
          set -euo pipefail
          cargo check -p oxidizr-arch
          cargo test -p oxidizr-arch --features bdd -q

  oxidizr-cli-core-bdd:
    name: BDD (oxidizr-cli-core)
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-cli-core BDD tests
        run: |
          set -euo pipefail
          cargo check -p oxidizr-cli-core
          cargo test -p oxidizr-cli-core --features bdd -q
