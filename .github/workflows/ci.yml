name: Continuous Integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt, clippy
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Run clippy
        run: cargo clippy --all-targets -- -D warnings

      - name: Guardrails (authoritative modules)
        run: |
          set -euo pipefail
          echo "Checking no direct which::which usage outside src/system/worker/fs_ops.rs"
          if grep -R --line-number --fixed-strings "which::which" src | grep -v "^src/system/worker/fs_ops.rs:"; then
            echo "ERROR: which::which used outside src/system/worker/fs_ops.rs" >&2
            exit 1
          fi

          echo "Checking single logging sink setup (tracing_subscriber::fmt only in src/logging/init.rs)"
          if grep -R --line-number --fixed-strings "tracing_subscriber::fmt" src | grep -v "^src/logging/init.rs:"; then
            echo "ERROR: tracing_subscriber::fmt used outside src/logging/init.rs" >&2
            exit 1
          fi

          echo "Checking single symlink implementation (std::os::unix::fs::symlink only in src/symlink/ops.rs)"
          if grep -R --line-number --fixed-strings "std::os::unix::fs::symlink" src | grep -v "^src/symlink/ops.rs:"; then
            echo "ERROR: std::os::unix::fs::symlink used outside src/symlink/ops.rs" >&2
            exit 1
          fi

          # Also check the common alias used in code: unix_fs::symlink
          if grep -R --line-number --fixed-strings "unix_fs::symlink" src | grep -v "^src/symlink/ops.rs:"; then
            echo "ERROR: unix_fs::symlink used outside src/symlink/ops.rs" >&2
            exit 1
          fi

          echo "Guardrails passed"

      - name: Guardrails (switchyard crate)
        run: echo "Switchyard guardrails moved to cargo/switchyard/.github/workflows/lint.yml"

      - name: Hermetic tests guard (no absolute system paths under switchyard tests)
        run: echo "Switchyard hermetic tests guard moved to crate lint workflow"

      - name: Zero-SKIP gate (no #[ignore] tests)
        run: echo "Switchyard zero-skip gate moved to crate lint workflow"

      - name: Changelog updated for switchyard crate changes
        run: echo "Switchyard changelog gate moved to crate lint workflow"

  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        rust: [stable, beta, nightly]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust (${{ matrix.rust }})
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run unit tests
        run: cargo test

  

  e2e-oxidizr-deb:
    name: E2E oxidizr-deb (Ubuntu)
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Build oxidizr-deb
        run: |
          set -euxo pipefail
          cargo build -p oxidizr-deb --release
      - name: Install tools for fetching uutils
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends jq xz-utils
      - name: Prepare hermetic root and uutils artifact
        id: prep
        run: |
          set -euxo pipefail
          ROOT=$(mktemp -d)
          echo "root=$ROOT" >> $GITHUB_OUTPUT
          mkdir -p "$ROOT/usr/bin" "$ROOT/var/lock" "$ROOT/opt/uutils"
          # Fetch latest uutils-coreutils release for x86_64-unknown-linux-gnu
          URL=$(curl -sSL https://api.github.com/repos/uutils/coreutils/releases/latest | jq -r '.assets[] | select(.name|test("x86_64-unknown-linux-gnu.tar.xz$")) | .browser_download_url' | head -n1)
          if [ -z "$URL" ]; then echo "Failed to locate uutils release URL" >&2; exit 1; fi
          TMPDIR=$(mktemp -d)
          curl -L "$URL" -o "$TMPDIR/uutils.tar.xz"
          tar -C "$TMPDIR" -xJf "$TMPDIR/uutils.tar.xz"
          UU=$(find "$TMPDIR" -type f -name uutils -perm -u+x | head -n1)
          if [ -z "$UU" ]; then echo "uutils binary not found in archive" >&2; exit 1; fi
          install -Dm0755 "$UU" "$ROOT/opt/uutils/uutils"
      - name: Switch coreutils into hermetic root
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" --commit use coreutils --offline --use-local "$ROOT/opt/uutils/uutils"
          test -L "$ROOT/usr/bin/ls"
      - name: Verify ls is from uutils
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          set +e
          "$ROOT/usr/bin/ls" --version > /tmp/ls_version.txt 2>&1
          set -e
          cat /tmp/ls_version.txt
          grep -i "uutils" /tmp/ls_version.txt
      - name: Status JSON smoke check
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" status --json | tee /tmp/status.json
          test "$(jq -r .coreutils /tmp/status.json)" = "active"
      - name: Doctor JSON smoke check
        run: |
          set -euxo pipefail
          ROOT='${{ steps.prep.outputs.root }}'
          ./target/release/oxidizr-deb --root "$ROOT" doctor --json | tee /tmp/doctor.json
          # basic checks
          test "$(jq -r .paths_ok /tmp/doctor.json)" = "true"
          # locks should not be present in this hermetic root
          test "$(jq -r .locks_present /tmp/doctor.json)" = "false"
      - name: Upload E2E logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-oxidizr-deb-logs
          path: |
            /tmp/ls_version.txt
            /tmp/status.json
            /tmp/doctor.json
          if-no-files-found: warn

  oxidizr-deb-bdd:
    name: BDD (oxidizr-deb CLI)
    runs-on: ubuntu-latest
    needs: e2e-oxidizr-deb
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-deb BDD tests (safe fakeroot + dry-run)
        run: |
          set -euo pipefail
          cargo check -p oxidizr-deb
          cargo test -p oxidizr-deb --features bdd -q

  oxidizr-deb-full-smoke:
    name: Full Smoke (oxidizr-deb, disposable Ubuntu container)
    runs-on: ubuntu-latest
    needs: oxidizr-deb-bdd
    steps:
      - uses: actions/checkout@v3
      - name: Run full destructive smoke in Ubuntu container
        run: |
          set -euo pipefail
          bash scripts/ubuntu_full_smoke.sh

  oxidizr-arch-smoke:
    name: Smoke (oxidizr-arch in Arch container)
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v3
      - name: Build Arch runner image
        run: |
          set -euxo pipefail
          docker build -t oxidizr-arch-ci -f test-orch/docker/Dockerfile .
      - name: Compile oxidizr-arch inside Arch container
        run: |
          set -euxo pipefail
          docker run --rm -v "$PWD:/workspace" -w /workspace --entrypoint bash oxidizr-arch-ci -lc '
            set -euxo pipefail
            cargo build -p oxidizr-arch --release
          '
      - name: Run minimal smoke (status/doctor under hermetic root)
        run: |
          set -euxo pipefail
          docker run --rm -v "$PWD:/workspace" -w /workspace --entrypoint bash oxidizr-arch-ci -lc '
            set -euxo pipefail
            ROOT=$(mktemp -d)
            mkdir -p "$ROOT/usr/bin" "$ROOT/var/lock"
            ./target/release/oxidizr-arch --root "$ROOT" status --json | tee /tmp/arch_status.json
            ./target/release/oxidizr-arch --root "$ROOT" doctor --json | tee /tmp/arch_doctor.json
          '
      - name: Upload oxidizr-arch smoke logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: arch-smoke-logs
          path: |
            /tmp/arch_status.json
            /tmp/arch_doctor.json
          if-no-files-found: ignore

  oxidizr-arch-bdd:
    name: BDD (oxidizr-arch CLI)
    runs-on: ubuntu-latest
    needs: oxidizr-arch-smoke
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-arch BDD tests
        run: |
          set -euo pipefail
          cargo check -p oxidizr-arch
          cargo test -p oxidizr-arch --features bdd -q

  oxidizr-cli-core-bdd:
    name: BDD (oxidizr-cli-core)
    runs-on: ubuntu-latest
    needs: test-unit
    steps:
      - uses: actions/checkout@v3
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      - name: Run oxidizr-cli-core BDD tests
        run: |
          set -euo pipefail
          cargo check -p oxidizr-cli-core
          cargo test -p oxidizr-cli-core --features bdd -q
